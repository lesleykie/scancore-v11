name: 'Execute Script'
description: 'Executes a shell script with proper error handling and logging'
inputs:
  script-path:
    description: 'Path to the script to execute'
    required: true
  script-name:
    description: 'Name of the script'
    required: true
  description:
    description: 'Description of the script'
    required: false
    default: 'No description'
  requires-github-token:
    description: 'Whether the script requires a GitHub token'
    required: false
    default: 'false'
  requires-aws:
    description: 'Whether the script requires AWS credentials'
    required: false
    default: 'false'
  requires-docker:
    description: 'Whether the script requires Docker'
    required: false
    default: 'false'
outputs:
  status:
    description: 'Execution status (success/failure)'
    value: ${{ steps.execute.outputs.status }}
  duration:
    description: 'Execution duration in seconds'
    value: ${{ steps.execute.outputs.duration }}
  lines-count:
    description: 'Number of lines in the log'
    value: ${{ steps.execute.outputs.lines-count }}
  error-count:
    description: 'Number of errors in the log'
    value: ${{ steps.execute.outputs.error-count }}
  warning-count:
    description: 'Number of warnings in the log'
    value: ${{ steps.execute.outputs.warning-count }}
  exit-code:
    description: 'Exit code of the script'
    value: ${{ steps.execute.outputs.exit-code || 0 }}
runs:
  using: "composite"
  steps:
    - name: Setup Docker
      uses: docker/setup-buildx-action@v3
      if: inputs.requires-docker == 'true'
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      if: inputs.requires-aws == 'true'
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: app/package-lock.json
    
    - name: Install common dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl git
    
    - name: Create execution environment
      shell: bash
      run: |
        echo "::group::Execution Environment Setup"
        
        # Create logs directory
        mkdir -p logs
        
        # Set up environment variables
        export SCRIPT_NAME="${{ inputs.script-name }}"
        export SCRIPT_PATH="${{ inputs.script-path }}"
        export EXECUTION_TIME=$(date '+%Y-%m-%d_%H-%M-%S')
        export LOG_FILE="logs/${SCRIPT_NAME}_${EXECUTION_TIME}.log"
        
        echo "SCRIPT_NAME=$SCRIPT_NAME" >> $GITHUB_ENV
        echo "SCRIPT_PATH=$SCRIPT_PATH" >> $GITHUB_ENV
        echo "EXECUTION_TIME=$EXECUTION_TIME" >> $GITHUB_ENV
        echo "LOG_FILE=$LOG_FILE" >> $GITHUB_ENV
        
        echo "Script: $SCRIPT_NAME"
        echo "Path: $SCRIPT_PATH"
        echo "Description: ${{ inputs.description }}"
        echo "Log file: $LOG_FILE"
        
        echo "::endgroup::"
    
    - name: Execute script
      id: execute
      shell: bash
      run: |
        echo "::group::Executing Script: $SCRIPT_NAME"
        
        # Create log file
        touch "$LOG_FILE"
        
        # Function to log with timestamp
        log_with_timestamp() {
          echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
        }
        
        log_with_timestamp "Starting execution of script: $SCRIPT_NAME"
        log_with_timestamp "Script path: $SCRIPT_PATH"
        log_with_timestamp "Description: ${{ inputs.description }}"
        
        # Set script permissions
        chmod +x "$SCRIPT_PATH"
        
        # Execute script with timeout and error handling
        EXECUTION_START=$(date +%s)
        EXIT_CODE=0
        
        # Run script with timeout (30 minutes)
        if timeout 1800 bash -x "$SCRIPT_PATH" 2>&1 | tee -a "$LOG_FILE"; then
          log_with_timestamp "Script executed successfully"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          EXIT_CODE=$?
          log_with_timestamp "Script execution failed with exit code: $EXIT_CODE"
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
        fi
        
        EXECUTION_END=$(date +%s)
        EXECUTION_DURATION=$((EXECUTION_END - EXECUTION_START))
        
        log_with_timestamp "Execution completed in ${EXECUTION_DURATION} seconds"
        echo "duration=$EXECUTION_DURATION" >> $GITHUB_OUTPUT
        
        # Capture script output summary
        LINES_COUNT=$(wc -l < "$LOG_FILE")
        ERROR_COUNT=$(grep -c "ERROR\|error\|Error" "$LOG_FILE" || echo "0")
        WARNING_COUNT=$(grep -c "WARNING\|warning\|Warning" "$LOG_FILE" || echo "0")
        
        echo "lines-count=$LINES_COUNT" >> $GITHUB_OUTPUT
        echo "error-count=$ERROR_COUNT" >> $GITHUB_OUTPUT
        echo "warning-count=$WARNING_COUNT" >> $GITHUB_OUTPUT
        
        log_with_timestamp "Log summary - Lines: $LINES_COUNT, Errors: $ERROR_COUNT, Warnings: $WARNING_COUNT"
        
        echo "::endgroup::"
      env:
        GITHUB_TOKEN: ${{ inputs.requires-github-token == 'true' && env.GITHUB_TOKEN || '' }}
